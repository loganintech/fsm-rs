// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc 26.1
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `button.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:button.Button)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Button {
    // message fields
    // @@protoc_insertion_point(field:button.Button.event)
    pub event: ::protobuf::EnumOrUnknown<ButtonEvent>,
    // special fields
    // @@protoc_insertion_point(special_field:button.Button.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Button {
    fn default() -> &'a Button {
        <Button as ::protobuf::Message>::default_instance()
    }
}

impl Button {
    pub fn new() -> Button {
        ::std::default::Default::default()
    }

    // .button.ButtonEvent event = 1;

    pub fn event(&self) -> ButtonEvent {
        self.event.enum_value_or_default()
    }

    pub fn clear_event(&mut self) {
        self.event = ::protobuf::EnumOrUnknown::new(ButtonEvent::BUTTON_EVENT_UNSPECIFIED);
    }

    // Param is passed by value, moved
    pub fn set_event(&mut self, v: ButtonEvent) {
        self.event = ::protobuf::EnumOrUnknown::new(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "event",
            |m: &Button| { &m.event },
            |m: &mut Button| { &mut m.event },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Button>(
            "Button",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Button {
    const NAME: &'static str = "Button";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.event = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.event != ::protobuf::EnumOrUnknown::new(ButtonEvent::BUTTON_EVENT_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(1, self.event.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.event != ::protobuf::EnumOrUnknown::new(ButtonEvent::BUTTON_EVENT_UNSPECIFIED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.event))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Button {
        Button::new()
    }

    fn clear(&mut self) {
        self.event = ::protobuf::EnumOrUnknown::new(ButtonEvent::BUTTON_EVENT_UNSPECIFIED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Button {
        static instance: Button = Button {
            event: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Button {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Button").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Button {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Button {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:button.LED)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LED {
    // message fields
    // @@protoc_insertion_point(field:button.LED.state)
    pub state: ::protobuf::EnumOrUnknown<LEDState>,
    // special fields
    // @@protoc_insertion_point(special_field:button.LED.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LED {
    fn default() -> &'a LED {
        <LED as ::protobuf::Message>::default_instance()
    }
}

impl LED {
    pub fn new() -> LED {
        ::std::default::Default::default()
    }

    // .button.LEDState state = 1;

    pub fn state(&self) -> LEDState {
        self.state.enum_value_or_default()
    }

    pub fn clear_state(&mut self) {
        self.state = ::protobuf::EnumOrUnknown::new(LEDState::LED_STATE_UNSPECIFIED);
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: LEDState) {
        self.state = ::protobuf::EnumOrUnknown::new(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &LED| { &m.state },
            |m: &mut LED| { &mut m.state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LED>(
            "LED",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LED {
    const NAME: &'static str = "LED";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.state != ::protobuf::EnumOrUnknown::new(LEDState::LED_STATE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(1, self.state.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.state != ::protobuf::EnumOrUnknown::new(LEDState::LED_STATE_UNSPECIFIED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LED {
        LED::new()
    }

    fn clear(&mut self) {
        self.state = ::protobuf::EnumOrUnknown::new(LEDState::LED_STATE_UNSPECIFIED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LED {
        static instance: LED = LED {
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LED {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LED").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LED {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LED {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:button.ButtonEvent)
pub enum ButtonEvent {
    // @@protoc_insertion_point(enum_value:button.ButtonEvent.BUTTON_EVENT_UNSPECIFIED)
    BUTTON_EVENT_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:button.ButtonEvent.BUTTON_EVENT_PRESSED)
    BUTTON_EVENT_PRESSED = 1,
}

impl ::protobuf::Enum for ButtonEvent {
    const NAME: &'static str = "ButtonEvent";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ButtonEvent> {
        match value {
            0 => ::std::option::Option::Some(ButtonEvent::BUTTON_EVENT_UNSPECIFIED),
            1 => ::std::option::Option::Some(ButtonEvent::BUTTON_EVENT_PRESSED),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<ButtonEvent> {
        match str {
            "BUTTON_EVENT_UNSPECIFIED" => ::std::option::Option::Some(ButtonEvent::BUTTON_EVENT_UNSPECIFIED),
            "BUTTON_EVENT_PRESSED" => ::std::option::Option::Some(ButtonEvent::BUTTON_EVENT_PRESSED),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ButtonEvent] = &[
        ButtonEvent::BUTTON_EVENT_UNSPECIFIED,
        ButtonEvent::BUTTON_EVENT_PRESSED,
    ];
}

impl ::protobuf::EnumFull for ButtonEvent {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ButtonEvent").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ButtonEvent {
    fn default() -> Self {
        ButtonEvent::BUTTON_EVENT_UNSPECIFIED
    }
}

impl ButtonEvent {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ButtonEvent>("ButtonEvent")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:button.LEDState)
pub enum LEDState {
    // @@protoc_insertion_point(enum_value:button.LEDState.LED_STATE_UNSPECIFIED)
    LED_STATE_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:button.LEDState.LED_STATE_ON)
    LED_STATE_ON = 1,
    // @@protoc_insertion_point(enum_value:button.LEDState.LED_STATE_OFF)
    LED_STATE_OFF = 2,
}

impl ::protobuf::Enum for LEDState {
    const NAME: &'static str = "LEDState";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LEDState> {
        match value {
            0 => ::std::option::Option::Some(LEDState::LED_STATE_UNSPECIFIED),
            1 => ::std::option::Option::Some(LEDState::LED_STATE_ON),
            2 => ::std::option::Option::Some(LEDState::LED_STATE_OFF),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<LEDState> {
        match str {
            "LED_STATE_UNSPECIFIED" => ::std::option::Option::Some(LEDState::LED_STATE_UNSPECIFIED),
            "LED_STATE_ON" => ::std::option::Option::Some(LEDState::LED_STATE_ON),
            "LED_STATE_OFF" => ::std::option::Option::Some(LEDState::LED_STATE_OFF),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [LEDState] = &[
        LEDState::LED_STATE_UNSPECIFIED,
        LEDState::LED_STATE_ON,
        LEDState::LED_STATE_OFF,
    ];
}

impl ::protobuf::EnumFull for LEDState {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("LEDState").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for LEDState {
    fn default() -> Self {
        LEDState::LED_STATE_UNSPECIFIED
    }
}

impl LEDState {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<LEDState>("LEDState")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cbutton.proto\x12\x06button\"3\n\x06Button\x12)\n\x05event\x18\x01\
    \x20\x01(\x0e2\x13.button.ButtonEventR\x05event\"-\n\x03LED\x12&\n\x05st\
    ate\x18\x01\x20\x01(\x0e2\x10.button.LEDStateR\x05state*E\n\x0bButtonEve\
    nt\x12\x1c\n\x18BUTTON_EVENT_UNSPECIFIED\x10\0\x12\x18\n\x14BUTTON_EVENT\
    _PRESSED\x10\x01*J\n\x08LEDState\x12\x19\n\x15LED_STATE_UNSPECIFIED\x10\
    \0\x12\x10\n\x0cLED_STATE_ON\x10\x01\x12\x11\n\rLED_STATE_OFF\x10\x02b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Button::generated_message_descriptor_data());
            messages.push(LED::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(ButtonEvent::generated_enum_descriptor_data());
            enums.push(LEDState::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
